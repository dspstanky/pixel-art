uniform float4x4 ViewProj;
uniform texture2d image;

uniform float texelWidth;
uniform float texelHeight;
uniform float spread;

uniform int redColorCount;
uniform int greenColorCount;
uniform int blueColorCount;
uniform int bayerLevel;

sampler_state textureSampler {
	Filter   	= Point;
	AddressU 	= Clamp;
	AddressV 	= Clamp;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float4 PSDither(VertData v_in) : TARGET 
{
	float4 col = image.Sample(textureSampler, v_in.uv);

	int x = asint(v_in.uv.x * texelWidth);
	int y = asint(v_in.uv.y * texelHeight);

	//------Hardcoded Bayer Dithering Arrays------//
	int bayer2[4] = {
		0, 2,
		3, 1
	};

	int bayer4[16] = {
		0, 8, 2, 10,
		12, 4, 14, 6,
		3, 11, 1, 9,
		15, 7, 13, 5
	};

	int bayer8[64] = {
		0, 32, 8, 40, 2, 34, 10, 42,
		48, 16, 56, 24, 50, 18, 58, 26,  
		12, 44,  4, 36, 14, 46,  6, 38, 
		60, 28, 52, 20, 62, 30, 54, 22,  
		3, 35, 11, 43,  1, 33,  9, 41,  
		51, 19, 59, 27, 49, 17, 57, 25, 
		15, 47,  7, 39, 13, 45,  5, 37, 
		63, 31, 55, 23, 61, 29, 53, 21
	};

	float3 bayerValues = { 0.0, 0.0, 0.0 };
	bayerValues.x = float(bayer2[(x % 2) + (y % 2) * 2]) * (1.0f / 4.0f) - 0.5f;
	bayerValues.y = float(bayer4[(x % 4) + (y % 4) * 4]) * (1.0f / 16.0f) - 0.5f;
	bayerValues.z = float(bayer8[(x % 8) + (y % 8) * 8]) * (1.0f / 64.0f) - 0.5f;

	float4 result = col + spread * bayerValues[bayerLevel];

	result.x = floor((redColorCount - 1.0) * result.x + 0.5) / (redColorCount - 1.0);
	result.y = floor((greenColorCount - 1.0) * result.y + 0.5) / (greenColorCount - 1.0);
	result.z = floor((blueColorCount - 1.0) * result.z + 0.5) / (blueColorCount - 1.0);

	return result;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDither(v_in);
	}
}